generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url      = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String          @id @default(uuid())
  authProviders AuthProvider[]
  firstname     String
  lastname      String
  email         String?          @unique
  phone         String          @unique
  calls         Call[]
  ProjectMember ProjectMember[]
}

model AuthProvider {
  id              String   @id @default(uuid())
  provider        String
  providerUserId  String
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())

  @@unique([provider, providerUserId]) // Pour Ã©viter les doublons
}

model Project {
  id        String          @id @default(uuid())
  title     String
  createdAt DateTime        @default(now())
  members   ProjectMember[]
  calls     Call[]
  chapters  Chapter[]
}

enum ProjectRole {
  OWNER
  MEMBER
  VIEWER
  INTERVIEWEE
}

model ProjectMember {
  id               String   @id @default(uuid())
  projectId        String
  userId           String
  role             ProjectRole
  invitationStatus String // pending, accepted, rejected
  joinedAt         DateTime @default(now())

  project          Project  @relation(fields: [projectId], references: [id])
  user             User     @relation(fields: [userId], references: [id])
}

model Call {
  id           String   @id @default(uuid())
  projectId    String
  createdBy    String
  recordingUrl String?
  createdAt    DateTime @default(now())

  project    Project     @relation(fields: [projectId], references: [id])
  creator    User        @relation(fields: [createdBy], references: [id])
  transcript Transcript? @relation("CallTranscript")
}

model Items {
  id            String     @id @default(uuid())
  transcriptId  String
  word          String
  startTime     Float
  endTime       Float
  confidence    Float
  isCorrected   Boolean
  correctedWord String?
  transcript    Transcript @relation(fields: [transcriptId], references: [id])
}

model Transcript {
  id                 String   @id @default(uuid())
  createdAt          DateTime @default(now())
  callId             String   @unique
  call               Call     @relation("CallTranscript", fields: [callId], references: [id])
  
  rawTranscript      String
  correctedTranscript String?
  summary            String? // AI-generated summary
  topics             String[] // List of topics identified by AI

  speakerSegments    SpeakerSegment[]
  Items              Items[]
}

model SpeakerSegment {
  id              String   @id @default(uuid())
  transcriptId    String
  speaker         String
  startTime       Float
  endTime         Float
  text            String
  confidence      Float

  transcript      Transcript @relation(fields: [transcriptId], references: [id])
}

model Chapter {
  id              String   @id @default(uuid())
  projectId       String
  title           String // AI-generated title
  content         String // AI-generated paragraph(s)

  project        Project @relation(fields: [projectId], references: [id])
}


model Ride {
  id              String   @id @default(uuid())
  ride_data       Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) 
}

